// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

(function(name, definition) {
  if (typeof module === 'object' && module.exports) {
    module.exports = definition();
  } else if (typeof define === 'function' && define.amd) {
    define(name, definition);
  } else {
    this[name] = definition();
  }
})('line', function() {
  var events, line, _context;
  events = require('events');
  line = {};
  line.active = null;
  line.Line = (function(_super) {

    __extends(Line, _super);

    function Line(parent, listeners) {
      var blocks, done, event, listener;
      blocks = Array.prototype.slice.call(arguments);
      if (typeof parent === null || parent instanceof line.Line) {
        blocks.shift();
      } else {
        listeners = parent;
        parent = null;
      }
      if (typeof listeners === 'object') {
        blocks.shift();
      } else {
        listeners = {};
      }
      if (blocks.length && typeof blocks[0] !== 'function') {
        blocks = blocks[0];
      }
      this.parent = parent;
      this.blocks = [];
      this.waiting = 0;
      this.stopped = false;
      this.results = {};
      this.id = 0;
      for (event in listeners) {
        listener = listeners[event];
        this.on(event, listener);
      }
      this.add(blocks);
      if (this.parent) {
        done = this.parent.wait();
        this.once('end', function() {
          var args;
          args = Array.prototype.slice.call(arguments);
          args.unshift(null);
          return done.apply(this, args);
        });
      }
    }

    Line.prototype.add = function(blocks) {
      var block, _i, _len,
        _this = this;
      if (typeof blocks === 'function') {
        blocks = Array.prototype.slice.call(arguments);
      }
      for (_i = 0, _len = blocks.length; _i < _len; _i++) {
        block = blocks[_i];
        this.blocks.push(block);
        if (this.blocks.length === 1) {
          setTimeout((function() {
            _this.next();
          }), 0);
        }
      }
      return this;
    };

    Line.prototype.wait = function(name, fn) {
      var _this = this;
      this.waiting++;
      if (name === void 0 || typeof name === 'function') {
        fn = name;
        name = ++this.id;
      } else if (name === true) {
        name = ++this.id;
        this.resultId = name;
      }
      return function() {
        var args;
        _this.waiting--;
        if (_this.stopped) {
          return;
        }
        args = Array.prototype.slice.call(arguments);
        if (args.length === 1 && typeof args[0] === 'boolean') {
          args.unshift(null);
        }
        if (args[0]) {
          return _this._bubble('error', args);
        } else {
          args.shift();
          _this._bubble('result', args);
          if (name !== null) {
            _this.results[name] = args;
          }
          try {
            line.active = _this;
            if (fn) {
              fn.apply(_this, args);
            }
            line.active = null;
          } catch (e) {
            _this._bubble('error', [e]);
          }
          if (!_this.waiting && !_this.stopped) {
            return _this.next();
          }
        }
      };
    };

    Line.prototype.next = function() {
      var args, block, done, result;
      this.stopped = false;
      args = this.results[this.resultId || this.id];
      this.resultId = null;
      if (!this.blocks.length) {
        this.emit.apply(this, ['end'].concat(args));
      } else {
        block = this.blocks.shift();
        done = this.wait();
        try {
          line.active = this;
          result = block.apply(this, args);
          line.active = null;
          done(null, result);
        } catch (e) {
          done(e);
        }
      }
    };

    Line.prototype.fail = function() {
      var args;
      args = Array.prototype.slice.call(arguments);
      this._bubble('error', args);
    };

    Line.prototype.stop = function() {
      var args;
      this.stopped = true;
      args = Array.prototype.slice.call(arguments);
      this._bubble('stop', args);
    };

    Line.prototype._bubble = function(event, args) {
      var cur;
      args = [event].concat(args);
      if (!this._events || !this._events[event]) {
        cur = this;
        while ((cur = cur.parent)) {
          if (cur._events && cur._events[event]) {
            if (cur.emit.apply(cur, args) !== true) {
              return;
            }
          }
        }
      }
      return this.emit.apply(this, args);
    };

    return Line;

  })(events.EventEmitter);
  _context = null;
  line.add = function() {
    if (!_context) {
      _context = new line.Line(line.active);
    }
    _context.add.apply(_context, arguments);
  };
  line.error = function(listener) {
    if (!_context) {
      _context = new line.Line(line.active);
    }
    _context.on('error', listener);
  };
  line.run = function() {
    if (!_context) {
      _context = new line.Line(line.active);
    }
    _context.add.apply(_context, arguments);
    _context = null;
  };
  line.wait = function(fn) {
    return line.active.wait(fn);
  };
  line.fail = function() {
    return line.active.fail.apply(line.active, arguments);
  };
  line.stop = function() {
    return line.active.stop.apply(line.active, arguments);
  };
  return line;
});
